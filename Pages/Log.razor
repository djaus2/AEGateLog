@page "/Log"
@page "/Log/{CurrentCount:int}"

@using Newtonsoft.Json;
@using System;
@using System.Data;
@using System.ComponentModel.DataAnnotations;
@using BlazorQRCode.Data;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Text;

@inject NavigationManager navigationManager
@inject BlazorQRCode.Data.AthleteService  athsService
@inject BlazorQRCode.Data.HomeController  homeController

@inject HttpClient client
@inject IJSRuntime JsRuntime

@using AspNetMonsters.Blazor.Geolocation
@inject LocationService  LocationService




<h2>Aths Essendon Track Log</h2>
<h1>Log attendance</h1>

<br />

<EditForm OnValidSubmit=@OnValidSubmit Model="@athlete">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="Name">Name</label>
        <InputText @bind-Value=athlete.Name class="form-control" id="Name" PlaceHolder="Please enter a first name at least." />
        <ValidationMessage For="@(() => athlete.Name)" />
    </div>
    <div class="form-group">
        <label for="Age">Mobile Number without leading 0</label><br />
        <InputText @bind-Value=athlete.PhoneNumber class="form-control" id="Mobile" PlaceHolder="Please enter a valid mobile number, eg 0456789123" />
        <ValidationMessage For="@(() => athlete.PhoneNumber)" />
    </div>
    <input type="submit" class="btn btn-primary" value="Log Me" />
</EditForm>
<h3>You are here</h3>
<div>
    Lat: @location?.Latitude <br />
    Long: @location?.Longitude <br />
    Accuracy: @location?.Accuracy <br />
</div>
@if (@showGif)
{
    <img src="./basicloader.gif" />
}
@code {
    [Parameter]
    public int? CurrentCount { get; set; }

    public int mode { get; set; } = 1;

    D2Athlete athlete = new D2Athlete();
    string PhoneText { get; set; } = "04";
    string Club { get; set; } = "";
    string Output { get; set; } = "";
    string error { get; set; }

    bool showGif = false;

    int Pin = 0;

    HttpClient Http;

    void LogOut()
    {

    }

    Location location = null;

    protected async Task GetLocation()
    {
        location = await LocationService.GetLocationAsync();
        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            base.OnAfterRender(first);
            await GetLocation();
        }
    }

    protected override void OnInitialized()
    {
        Http = new HttpClient();
        base.OnInitialized();
        if (homeController.GetState())
        {
            homeController.LogOut();
        }
        CurrentCount = CurrentCount ?? 1;
        Pin = homeController.Pin;
        if (CurrentCount != Pin)
        {
            navigationManager.NavigateTo("/");
        }
    }


    //void OnValidSubmit(EditContext editContext)
    async Task OnValidSubmit()
    {
        error = null;
        try
        {
            showGif = true;
            StateHasChanged();

            int pin = homeController.Pin;
            string name = athlete.Name;
            string phone = athlete.PhoneNumber;
            if (!CheckDetails(name, phone))
            {
                showGif = false;
                await JsRuntime.InvokeAsync<bool>("alert", "Invalid entry: Need Name and valid Mobile.");
                return;
            }
            homeController.Authenticate(name, phone);
            D2Athlete athlete2 = new D2Athlete { Name = name, PhoneNumber = phone, Date = DateTime.Now, Email = "a@b.c.com", Mode = mode, Pin = Pin };
            if (location != null)
            {
                //MS SQL serer truncates decimal to 2 decimal digits
                //Ref: https://mattferderer.com/entity-framework-no-type-was-specified-for-the-decimal-column
                decimal? latitude = location?.Latitude * 1000000;
                decimal? longitute = location?.Longitude * 1000000;
                decimal? accuracy = location?.Accuracy * 1000000;
                athlete2.Latitude = latitude;
                athlete2.Longitude = longitute;
                athlete2.Accuracy = accuracy;
            }

            var content = new StringContent(
                JsonConvert.SerializeObject(athlete2),
                Encoding.UTF8,
                "application/json");

            var response = await client.PostAsync($"{Settings.baseURL}", content);

            var aths = await client.GetFromJsonAsync<D2Athlete[]>($"{Settings.baseURL}");


            showGif = false;
            StateHasChanged();
            string target = $"/Thanks/{pin}";
            navigationManager.NavigateTo(target);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    /// <summary>
    /// Check for a vali mobile number
    /// Can enter a local landline
    /// Can enter an email address
    /// </summary>
    /// <param name="name"></param>
    /// <param name="phone"></param>
    /// <returns></returns>
    bool CheckDetails(string name, string phone)
    {
        if (string.IsNullOrEmpty(name))
            return false;
        if (string.IsNullOrEmpty(phone))
            return false;

        //Validate Mobile
        //0400000000 to 0499999999
        long MobileNo;
        if (long.TryParse(phone, out MobileNo))
        {
            if (MobileNo >= 0400000000)
            {
                if (MobileNo <= 0499999999)
                {
                    return true;
                }
            }
            if (MobileNo >= 90000000)
            {
                if (MobileNo <= 99999999)
                {
                    return true;
                }
            }
        }
        var foo = new EmailAddressAttribute();
        if (foo.IsValid("phone"))
            return true;

        return false;
    }
}


